@charset "UTF-8";

html {
  font-size: 15px;
}

body {
  font-family: 'Noto Sans JP', sans-serif;
  line-height: 1;
  color: #333;
}

.container {
  max-width: 1050px;
  height: 220vh;
  margin: 0 auto;
  /* padding: 5rem; */
  background-color: #eee;
}

#gradient-header-sample {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 3rem;
}

#gradient-header-sample > h2{
  font-size: 2rem;
  line-height: 1em;
  font-weight: 900;
  text-transform: uppercase;
  cursor: pointer;
}

/* MDNに載っているlinear-gradientの書き方 */
/* #gradient-header-sample.basic-zero {
  width: 20rem;
  height: 20rem;
  background: linear-gradient(45deg, red, blue);
  background: linear-gradient(to left bottom, red, blue);
  background: linear-gradient(180deg, red, green 40%, blue);
  background: linear-gradient(.325turn, red, 50%, blue);
  background: linear-gradient(180deg, red 0 50%, blue 50% 100%);
} */

/* MDNには載っていない書き方を順に説明する */
/* 考え方 #1 */
/* 
  選択範囲の背景を現状のcolorで塗りつぶす 
*/
/* #gradient-header-sample.basic-one {
    background: linear-gradient(currentColor 0 0);
} */

/* 考え方 #2 */
/* 
  5等分した選択範囲を5行作ってそれぞれに架線をひく
  100％を5等分して一つの長さは20％
  Index0から始まり、Index0, Index1, Index2, Index3, Index4までの
  4つの区域の先頭の値は、
  0 × 25％ ＝ 0%
  1 × 25％ ＝ 25%
  2 × 25％ ＝ 50%
  3 × 25％ ＝ 75%
  4 × 25％ ＝ 100%
  選択範囲の上辺から下に向かって100％のところ
  長さは20％ これでそれぞれの選択範囲に下線がひける 
*/
#gradient-header-sample.basic-zero {
  background: linear-gradient(currentColor 0 0)
              0% 100%/20% 3px no-repeat;
}
#gradient-header-sample.basic-twofive {
  background: linear-gradient(currentColor 0 0)
              25% 100%/20% 3px no-repeat;
}
#gradient-header-sample.basic-half {
  background: linear-gradient(currentColor 0 0)
              50% 100%/20% 3px no-repeat;
}
#gradient-header-sample.basic-fourthird {
  background: linear-gradient(currentColor 0 0)
              75% 100%/20% 3px no-repeat;
}
#gradient-header-sample.basic-full {
  background: linear-gradient(currentColor 0 0)
              100% 100%/20% 3px no-repeat;
}

/* 考え方 #3 */
/* 
1行目 => 選択範囲を指定の塗り色で塗りつぶします。
2行目 => 
支点は左辺から右辺に向けて0％の位置で、
選択範囲の上辺から下に向かって100％のところ
長さは、
変数に指定がなければ、100％
これで選択範囲の3pxの下線がひける。
*/
#gradient-header-sample.basic-one {
  background: linear-gradient(currentColor 0 0)
              0% 100%/var(--d, 100%) 3px no-repeat; 
}


/* 考え方　結論 */
/* 
  1行目 => 選択範囲を指定の塗り色で塗りつぶします。
  2行目 => 
  始点は0％の位置で、
  高さは、選択範囲の上辺から下に向かって100％のところ
  長さは、変数に指定がなければ、0％の場所を始点として
  ホバーをトリガーに、100%の選択範囲へ3pxの下線が拡がっていく。
*/
#gradient-header-sample.basic-two {
  background: linear-gradient(currentColor 0 0)
              0% 100%/var(--d, 0%) 3px no-repeat;
}
#gradient-header-sample.basic-two:hover {
  --d: 100%;
}

/*  ここまでがベース。ここから線の出方を変えていく。
    まずは、transitionをかける。 */
#gradient-header-sample.basic-three {
  background: linear-gradient(currentColor 0 0)
              0% 100%/var(--d, 0%) 3px no-repeat;
  transition: .5s;
}
#gradient-header-sample.basic-three:hover {
  --d: 100%;
}

/*  横位置100％の地点を始点として
    ホバーをトリガーに、100%の選択範囲へ3pxの下線が拡がっていく。
    つまり、右から左へ線が引ける。 */
#gradient-header-sample.basic-four {
  background: linear-gradient(currentColor 0 0)
              100% 100%/var(--d, 0%) 3px no-repeat;
  transition: .5s;
}
#gradient-header-sample.basic-four:hover {
  --d: 100%;
}

/*  横位置50％の地点を始点として
    ホバーをトリガーに、100%の選択範囲へ3pxの下線が拡がっていく。
    つまり、中央から両橋にかけて線が引ける。 */
#gradient-header-sample.basic-five {
  background: linear-gradient(currentColor 0 0)
              50% 100%/var(--d, 0%) 3px no-repeat;
  transition: .5s;
}
#gradient-header-sample.basic-five:hover {
  --d: 100%;
}

/* 理屈が全く理解できない。
ホバー時の始点の移動 var(--p, 0%) hover=> --p: 100%;
それと、background-position 0s 0.5s */
#gradient-header-sample.basic-six {
  background: linear-gradient(currentColor 0 0) 
              var(--p, 0%) 100%/var(--d, 0%) 3px no-repeat;
  transition: .5s, background-position 0s 0.5s;
}
#gradient-header-sample.basic-six:hover {
  --d: 100%;
  --p: 100%;
}

/* basic-sixでの罫線を最初に表示させておいてホバーで消すに変更してみる。 */
#gradient-header-sample.basic-seven {
  background: linear-gradient(currentColor 0 0) 
              var(--p, 100%) 100%/var(--d, 100%) 3px no-repeat;
  transition: .5s, background-position 0s 0.5s;
}
#gradient-header-sample.basic-seven:hover {
  --d: 0%;
  --p: 0%;
}

/* basic-six, basic-sevenの逆バージョン */
#gradient-header-sample.basic-eight {
  background: linear-gradient(currentColor 0 0) 
              var(--p, 100%) 100%/var(--d, 0%) 3px no-repeat;
  transition: .5s, background-position 0s 0.5s;
}
#gradient-header-sample.basic-eight:hover {
  --d: 100%;
  --p: 0%;
}

/* basic-eightでの罫線を最初に表示させておいてホバーで消すに変更してみる。 */
#gradient-header-sample.basic-nine {
  background: linear-gradient(currentColor 0 0) 
              var(--p, 0%) 100%/var(--d, 100%) 3px no-repeat;
  transition: .5s, background-position 0s 0.5s;
}
#gradient-header-sample.basic-nine:hover {
  --d: 0%;
  --p: 100%;
}

/*  横位置50％の地点を始点として
    ホバーをトリガーに、100%の選択範囲へ3pxの下線が拡がっていく。
    つまり、中央から両橋にかけて線が引ける。 */
#gradient-header-sample.basic-ten {
  background: linear-gradient(currentColor 0 0) 
              50% 100%/var(--d, 5%) 3px no-repeat;
  transition: .5s;
}

#gradient-header-sample.basic-ten:hover {
  --d: 100%;
}

/* -------------------------------------------------------- */

.flexible-three {
  width: 100%;
  height: 70vh;
  margin-top: 10rem;
}

.container .flexible-three picture {
  border: none;
}

.container .flexible-three dt {
  background: linear-gradient(#777 0 0) top,
  linear-gradient(#777 0 0) left,
  linear-gradient(#777 0 0) bottom,
  linear-gradient(#777 0 0) right;
  background-size: var(--d, 0) 1px, 1px var(--d, 0);
  background-repeat: no-repeat;
  transition: 0.5s;
  border: 1px solid #ccc;
}

.container .flexible-three dt:hover {
  --d: 100%;
}

/* -------------------------------------------------------- */

.flexible-two {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 70vh;
}

.allsides-3 {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 20rem;
  height: 20rem;
  /* linear-gradientの性質を使った解決方法。
  センターセンターから伸びる色が配色されて性質 */
  background: linear-gradient(blue 0 0) top,
              linear-gradient(blue 0 0) left,
              linear-gradient(blue 0 0) bottom,
              linear-gradient(blue 0 0) right;
  /* 背景画像の横罫線を指定
  widthについて、カスタムプロパティ
  『--d』が定義されない場合は『0px』
  hightについては、『1px』の設定。*/
  /* 次の、背景画像の縦罫線を指定
  widthについて、『1px』の設定。
  カスタムプロパティ『--d』が定義されない場合は
  hightについては、『0px』の設定*/
  /* なお、変数『--d』は予約語。変更できない。 */
  background-size: var(--d, 0) 1px, 1px var(--d, 0);
  background-repeat: no-repeat;
  border: 1px solid #333; 
  transition: 0.5s;
}

.allsides-3:hover {
  --d: 100%;
}

.allsides-3 > picture {
  display: block;
  width: calc(100% - 1rem);
  height: calc(100% - 1rem);
  overflow: hidden;
}

.allsides-3 > picture > img {
  display: inline-block;
  width: 100%;
  height: 100%;
  transform: scale(2);
  object-fit: contain;
  /* 効かない 画像自体を動かせない */
  /* object-position: 50% 50%; */
}

/* -------------------------------------------------------- */

.flexible-one {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 70vh;
}

.button-border {
  display: inline-block;
  position: relative;
  padding: 20px 40px;
  color: #3498db;
  background-color: #f5f5f5;
  border: 1px solid #eee;
}

/* Effect1
 *************************************** */
/* 擬似要素の共通スタイル */
.button-border::after,
.button-border::before,
.button-border span::after,
.button-border span::before {
  display: block;
  position: absolute;
  content: '';
  background-color: #3498db;
  transition: .3s ease;
  z-index: 10;
}

/* 左上へ配置 */
.button-border::after {
  content: "";
  width: 0px;
  height: 2px;
  top: -1px;
  left: -1px;
}

/* 右下へ配置 */
.button-border::before {
  content: "";
  width: 0px;
  height: 2px;
  right: -1px;
  bottom: -1px;
}

/* 左下へ配置 */
.button-border span::after {
  content: "";
  width: 2px;
  height: 0px;
  left: -1px;
  bottom: -1px;
}

/* 右上へ配置 */
.button-border span::before {
  content: "";
  width: 2px;
  height: 0px;
  top: -1px;
  right: -1px;
}

/* hover */
.button-border:hover::after,
.button-border:hover::before {
  width: 100%;
  width: calc(100% + 1px);
}

.button-border:hover span::after,
.button-border:hover span::before {
  height: 100%;
  height: calc(100% + 1px);
}

/* -------------------------------------------------------- */

.sample-border-effect {
  width: 100%;
  margin: 0 auto;
  height: 50vh;
}

.border-wrapper {
  position: relative;
}

.border {
  position: absolute;
  top: 0;
  width: 10rem;
  height: 10rem;
}

@keyframes border-width-anim {
  0% {
    width: 0%;
  }

  100% {
    width: 100%;
  }
}

@keyframes border-height-anim {
  0% {
    height: 0%;
  }

  100% {
    height: 100%;
  }
}

.border.top-bottom {
  left: 0;
  border-top: 2px solid #ccc;
  border-bottom: 2px solid #ccc;
}

.border.top-bottom:before {
  content: '';
  position: absolute;
  top: -2px;
  left: 50%;
  width: 0;
  border-top: solid 2px #000;
  transform: translateX(-50%);
  animation: border-width-anim .5s linear forwards;
}

.border.top-bottom:after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 50%;
  width: 0;
  border-bottom: solid 2px #000;
  transform: translateX(-50%);
  animation: border-width-anim .5s linear forwards;
}

.border.right-left {
  left: 0;
  border-right: 2px solid #ccc;
  border-left: 2px solid #ccc;
}

.border.right-left:before {
  content: '';
  position: absolute;
  top: 50%;
  right: -2px;
  height: 0;
  border-right: solid 2px #000;
  transform: translateY(-50%);
  animation: border-height-anim .5s linear forwards;
}

.border.right-left:after {
  content: '';
  position: absolute;
  top: 50%;
  left: -2px;
  height: 0;
  border-left: solid 2px #000;
  transform: translateY(-50%);
  animation: border-height-anim .5s forwards;
}

.sample-border-effect picture {
  display: block;
  position: absolute;
  top: .5rem;
  left: .5rem;
  width: calc(100% - 1rem);
  height: calc(100% - 1rem);
  overflow: hidden;
}

.sample-border-effect img {
  display: inline-block;
  width: 100%;
  object-fit: contain;
  object-position: 50% 50%;
  transform: scale(1.7);
}

/* -------------------------------------------------------- */

.remove-letter-spacing {
  letter-spacing: normal;
}

dl {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  width: 100%;
  gap: 1rem;
}

.wrapper dt {
  position: relative;
}

.wrapper h2 {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  font-size: .9rem;
  font-weight: 600;
  text-align: center;
  letter-spacing: .5rem;
  color: #fff;
  text-shadow: 0 0 10px #333;
}

.wrapper picture {
  display: block;
  position: relative;
  padding: .25rem;
  width: 100%;
  height: 100%;
  border: 1px solid #ccc;
  overflow: hidden;
}

.wrapper img {
  width: 100%;
  transition: .5s;
}

.wrapper picture::before {
  position: absolute;
  top: .25rem;
  left: .25rem;
  content: "";
  width: calc(100% - 0.5rem);
  height: calc(100% - 0.5rem);
  background-color: rgba(50, 50, 50, .6);
  transition: 1s;
  visibility: hidden;
  opacity: 0;
}

.wrapper picture.cover::before {
  visibility: visible;
  opacity: 1;
}

.wrapper dd {
  margin-top: .75rem;
  line-height: 1.5em;
  text-indent: 1em;
}